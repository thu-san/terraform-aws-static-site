name: Terraform CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  TERRAFORM_VERSION: "1.9.0"
  
jobs:
  validate:
    name: Validate & Format
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
    
    - name: Validate Module Structure
      run: |
        # Check that required files exist
        required_files=("variables.tf" "outputs.tf" "versions.tf")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "ERROR: Required file $file is missing"
            exit 1
          fi
        done
        echo "âœ“ Module structure is valid"
        
        # Check that we're not defining providers in the module
        if grep -l "^provider\s" *.tf 2>/dev/null; then
          echo "ERROR: Module should not define providers"
          exit 1
        fi
        echo "âœ“ No provider blocks found in module (correct)"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate
    
    # Set mock AWS credentials for tests
    env:
      AWS_ACCESS_KEY_ID: mock_access_key
      AWS_SECRET_ACCESS_KEY: mock_secret_key
      AWS_DEFAULT_REGION: us-east-1
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Initialize Terraform
      run: terraform init
    
    - name: Run Terraform Tests
      run: |
        # Copy the test provider override to root for tests
        cp test/provider_override.tf provider_override.tf
        
        # Re-initialize with provider override
        terraform init -upgrade
        
        # Run tests
        terraform test -test-directory=test
        
        # Clean up
        rm -f provider_override.tf

  test-examples:
    name: Test Examples
    runs-on: ubuntu-latest
    needs: validate
    
    # Set mock AWS credentials for example validation
    env:
      AWS_ACCESS_KEY_ID: mock_access_key
      AWS_SECRET_ACCESS_KEY: mock_secret_key
      AWS_DEFAULT_REGION: us-east-1
    
    strategy:
      matrix:
        example:
          - basic
          - with-custom-domain  
          - with-logging
          - from-github
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Validate Example - ${{ matrix.example }}
      working-directory: examples/${{ matrix.example }}
      run: |
        terraform init -backend=false
        terraform validate
        terraform fmt -check

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run TFSec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        soft_fail: true
        
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@v12
      with:
        directory: .
        framework: terraform
        quiet: true
        soft_fail: true
        # Skip checks for S3 logging and encryption as they're optional
        skip_check: CKV_AWS_18,CKV_AWS_19,CKV_AWS_20,CKV_AWS_21,CKV2_AWS_41,CKV2_AWS_62

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check Required Files
      run: |
        required_files=("README.md" "CHANGELOG.md" "LICENSE" "CONTRIBUTING.md")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "ERROR: Required file $file is missing"
            exit 1
          fi
        done
        echo "All required documentation files present"
    
    - name: Check Example Documentation
      run: |
        for dir in examples/*/; do
          if [ ! -f "$dir/README.md" ]; then
            echo "ERROR: README.md is missing in $dir"
            exit 1
          fi
        done
        echo "All examples have README files"

  release-check:
    name: Release Readiness
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, test-examples, security-scan, documentation]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check Version Tag
      id: check_tag
      run: |
        # Get version from module.json
        MODULE_VERSION=$(grep -o '"version": "[^"]*"' module.json | cut -d'"' -f4)
        echo "Module version: $MODULE_VERSION"
        
        # Check if tag exists
        if git rev-parse "v$MODULE_VERSION" >/dev/null 2>&1; then
          echo "Tag v$MODULE_VERSION already exists"
          echo "tag_exists=true" >> $GITHUB_OUTPUT
        else
          echo "Tag v$MODULE_VERSION does not exist"
          echo "tag_exists=false" >> $GITHUB_OUTPUT
          echo "version=$MODULE_VERSION" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release Summary
      if: steps.check_tag.outputs.tag_exists == 'false'
      run: |
        echo "## ðŸš€ Ready to Release v${{ steps.check_tag.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All checks have passed! To create a release:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "```bash" >> $GITHUB_STEP_SUMMARY
        echo "git tag v${{ steps.check_tag.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "git push origin v${{ steps.check_tag.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Then create a GitHub release from the tag." >> $GITHUB_STEP_SUMMARY